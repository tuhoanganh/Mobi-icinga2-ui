apply    Service     "IfCheck-" for  (interface_name    =>    if_index    in    host.vars.interface)    {
    import    "generic-service"
    import "SNMP-BASIC-TEMPLATE"
 
    check_command        =    "Interface-check-command"
    display_name        =     "IfCheck-" + interface_name
 
 
 
    vars.throughput       =    "90%,95%"
    vars.error            =    "50,100"
    vars.service_type     =    "LINK"
    vars                +=    if_index
    
    check_interval = 2m
    retry_interval = 30s
    enable_perfdata = true
 
    assign    where    host.vars.interface
}
 
 
apply Service "IfOptic-" for (interface_name    =>    if_index    in    host.vars.interface)    {
    import    "generic-service"
    import "SNMP-BASIC-TEMPLATE"
 
    check_command       = "check-snmp-with-oid-text-index"
    display_name        = "IfOptic-" + interface_name
  
    vars.snmp_oid_text_index = "Optic." + interface_name
    vars.snmp_oid_prefix = "1.3.6.1.4.1.2636.3.47.1.1.5.1.2"
    
    vars.snmp_units = "db"
    vars.snmp_timeout = 10
    vars.service_type     =    "OPTIC"
 
    check_interval = 30m
    retry_interval = 20s
    enable_perfdata = false
 
 
    ignore where   match("*ae*", interface_name)
    assign where   match("*ge*", interface_name) && match("*MX*",host.vars.model)
    assign where   match("*ge-1/1/1*", interface_name) && match("*ACX*",host.vars.model)
    assign where   match("*ge-1/1/0*", interface_name) && match("*ACX*",host.vars.model)
}


apply Service "pktLoss-" for (interface_name    =>    if_index    in    host.vars.interface)    {
    import    "generic-service"
    import "SNMP-BASIC-TEMPLATE"
 
    check_command       = "check-snmp-with-oid-text-index"
    display_name        = "pktLoss-" + interface_name
  

    vars.snmp_oid_text_index =  interface_name
    if (host.vars.device_type == "CSR") {
        vars.snmp_oid_prefix = "1.3.6.1.4.1.2636.3.50.1.2.1.4.6.85.112.108.105.110.107.8"
    } 
    if (host.vars.device_type == "AGG") {
        vars.snmp_oid_prefix = "1.3.6.1.4.1.2636.3.50.1.2.1.4.6.85.112.108.105.110.107.3"
    } 
    if (host.vars.device_type == "MC") {
        vars.snmp_oid_prefix = "1.3.6.1.4.1.2636.3.50.1.2.1.4.6.85.112.108.105.110.107.3"
    }
    vars.snmp_oid_surfix = ".2"
    
    vars.snmp_units = "percent"
    vars.snmp_timeout = 10

    vars.snmp_crit = 20
    vars.snmp_warn = 15

    vars.service_type     =    "PacketLoss"
 
    check_interval = 10m
    retry_interval = 20s
    enable_perfdata = true

    assign where   regex(".*ge-1/1/[0-1]*", interface_name) && regex(".*C[1-9].[1-9].+",host.name)
    assign where   regex(".*ge-1/1/[0-1]*", interface_name) && regex(".*C[1-9][0-9].[1-9].+",host.name)
    assign where   regex(".*ge-1/1/[0-1]*", interface_name) && regex(".*C10[0-1].+",host.name)

    assign where   regex(".*ae[0-1]*", interface_name) && match("ME-AGG-HNI*",host.name)

    assign where   regex(".*ae[0-2]*", interface_name) && match("*ME-AGG-RAN-HNI-YHA*",host.name)

    assign where   regex(".*ae[0-3].*", interface_name) && match("*ME-AGG-RAN-HNI-GBT*",host.name)

    assign where   match("*ae0*", interface_name) && match("*ME-AGG-4GLL*",host.name)

    assign where   regex(".*ae[0-1].*", interface_name) && match("ME-MC-HNI-BTT*",host.name)

    assign where   regex(".*ae[0-1].*", interface_name) && match("ME-MC-HNI-GBT*",host.name)
    assign where   regex(".*ae[2][8-9].*", interface_name) && match("ME-MC-HNI-GBT*",host.name)
    assign where   regex(".*ae[3][0-1].*", interface_name) && match("ME-MC-HNI-GBT*",host.name)

    assign where   regex(".*ae[0-1].*", interface_name) && match("ME-MC-HNI-YHA*",host.name)
    assign where   regex(".*ae[2][8-9].*", interface_name) && match("ME-MC-HNI-YHA*",host.name)
    assign where   regex(".*ae[3][0-1].*", interface_name) && match("ME-MC-HNI-YHA*",host.name)
}

apply Service "Delay-" for (interface_name    =>    if_index    in    host.vars.interface)    {
    import    "generic-service"
    import "SNMP-BASIC-TEMPLATE"
 
    check_command       = "check-snmp-with-oid-text-index"
    display_name        = "Delay-" + interface_name
  
    vars.snmp_oid_text_index =  interface_name
    if (host.vars.device_type == "CSR") {
        vars.snmp_oid_prefix = "1.3.6.1.4.1.2636.3.50.1.3.1.5.6.85.112.108.105.110.107.8"
    }
    if (host.vars.device_type == "AGG") {
        vars.snmp_oid_prefix = "1.3.6.1.4.1.2636.3.50.1.3.1.5.6.85.112.108.105.110.107.3"
    }
    if (host.vars.device_type == "MC") {
        vars.snmp_oid_prefix = "1.3.6.1.4.1.2636.3.50.1.3.1.5.6.85.112.108.105.110.107.3"
    }
    vars.snmp_oid_surfix = ".2.1"
    
    vars.snmp_units = "microsec"
    vars.snmp_timeout = 10


    vars.snmp_crit = 15000
    vars.snmp_warn = 20000

    vars.service_type     =    "Delay"
 
    check_interval = 10m
    retry_interval = 20s
    enable_perfdata = true

    assign where   regex(".*ge-1/1/[0-1]*", interface_name) && regex(".*C[1-9].[1-9].+",host.name)
    assign where   regex(".*ge-1/1/[0-1]*", interface_name) && regex(".*C[1-9][0-9].[1-9].+",host.name)
    assign where   regex(".*ge-1/1/[0-1]*", interface_name) && regex(".*C10[0-1].+",host.name)

    assign where   regex(".*ae[0-1]*", interface_name) && match("ME-AGG-HNI*",host.name)

    assign where   regex(".*ae[0-2]*", interface_name) && match("*ME-AGG-RAN-HNI-YHA*",host.name)

    assign where   regex(".*ae[0-3].*", interface_name) && match("*ME-AGG-RAN-HNI-GBT*",host.name)

    assign where   match("*ae0*", interface_name) && match("*ME-AGG-4GLL*",host.name)

    assign where   regex(".*ae[0-1].*", interface_name) && match("ME-MC-HNI-BTT*",host.name)

    assign where   regex(".*ae[0-1].*", interface_name) && match("ME-MC-HNI-GBT*",host.name)
    assign where   regex(".*ae[2][8-9].*", interface_name) && match("ME-MC-HNI-GBT*",host.name)
    assign where   regex(".*ae[3][0-1].*", interface_name) && match("ME-MC-HNI-GBT*",host.name)

    assign where   regex(".*ae[0-1].*", interface_name) && match("ME-MC-HNI-YHA*",host.name)
    assign where   regex(".*ae[2][8-9].*", interface_name) && match("ME-MC-HNI-YHA*",host.name)
    assign where   regex(".*ae[3][0-1].*", interface_name) && match("ME-MC-HNI-YHA*",host.name)
}

apply Service "Jitter-" for (interface_name    =>    if_index    in    host.vars.interface)    {
    import    "generic-service"
    import "SNMP-BASIC-TEMPLATE"
 
    check_command       = "check-snmp-with-oid-text-index"
    display_name        = "Jitter-" + interface_name
  
    vars.snmp_oid_text_index =  interface_name
    if (host.vars.device_type == "CSR") {
        vars.snmp_oid_prefix = "1.3.6.1.4.1.2636.3.50.1.3.1.6.6.85.112.108.105.110.107.8"
    }
    if (host.vars.device_type == "AGG") {
        vars.snmp_oid_prefix = "1.3.6.1.4.1.2636.3.50.1.3.1.6.6.85.112.108.105.110.107.3"
    }
    if (host.vars.device_type == "MC") {
        vars.snmp_oid_prefix = "1.3.6.1.4.1.2636.3.50.1.3.1.6.6.85.112.108.105.110.107.3"
    }
    vars.snmp_oid_surfix = ".2.1"
    
    vars.snmp_units = "microsec"
    vars.snmp_timeout = 10

    vars.snmp_crit = 10000
    vars.snmp_warn = 5000

    vars.service_type     =    "Jitter"
 
    check_interval = 10m
    retry_interval = 20s
    enable_perfdata = true

    assign where   regex(".*ge-1/1/[0-1]*", interface_name) && regex(".*C[1-9].[1-9].+",host.name)
    assign where   regex(".*ge-1/1/[0-1]*", interface_name) && regex(".*C[1-9][0-9].[1-9].+",host.name)
    assign where   regex(".*ge-1/1/[0-1]*", interface_name) && regex(".*C10[0-1].+",host.name)

    assign where   regex(".*ae[0-1]*", interface_name) && match("ME-AGG-HNI*",host.name)

    assign where   regex(".*ae[0-2]*", interface_name) && match("*ME-AGG-RAN-HNI-YHA*",host.name)

    assign where   regex(".*ae[0-3].*", interface_name) && match("*ME-AGG-RAN-HNI-GBT*",host.name)

    assign where   match("*ae0*", interface_name) && match("*ME-AGG-4GLL*",host.name)

    assign where   regex(".*ae[0-1].*", interface_name) && match("ME-MC-HNI-BTT*",host.name)

    assign where   regex(".*ae[0-1].*", interface_name) && match("ME-MC-HNI-GBT*",host.name)
    assign where   regex(".*ae[2][8-9].*", interface_name) && match("ME-MC-HNI-GBT*",host.name)
    assign where   regex(".*ae[3][0-1].*", interface_name) && match("ME-MC-HNI-GBT*",host.name)

    assign where   regex(".*ae[0-1].*", interface_name) && match("ME-MC-HNI-YHA*",host.name)
    assign where   regex(".*ae[2][8-9].*", interface_name) && match("ME-MC-HNI-YHA*",host.name)
    assign where   regex(".*ae[3][0-1].*", interface_name) && match("ME-MC-HNI-YHA*",host.name)
}

#apply    Service     "VoiceQueued-" for  (interface_name    =>    if_index    in    host.vars.interface)    {
#    import    "generic-service"
#    import "SNMP-BASIC-TEMPLATE"
#
#    check_command        =    "snmp"
#    display_name        =     "VoiceQueued-" + interface_name
#
#    vars                +=    if_index
#    vars.snmp_oid = "1.3.6.1.4.1.2636.3.15.1.1.6." + vars.if_index + ".5.86.79.73.67.69"
#
#
#    vars.snmp_units = "Bps"
#    vars.snmp_timeout = 10
#    vars.snmp_label = "VoiceQueued-" + interface_name
#
#    
#    check_interval = 5m
#    retry_interval = 30s
#    enable_perfdata = true
#
#    assign    where    host.vars.interface &&   match("*MX*", host.vars.model) 
#}


#apply    Service     "VoiceDropped-" for  (interface_name    =>    if_index    in    host.vars.interface)    {
#    import    "generic-service"
#    import "SNMP-BASIC-TEMPLATE"
#
#    check_command        =    "snmp"
#    display_name        =     "VoiceDropped-" + interface_name
#
#    vars                +=    if_index
#    vars.snmp_oid = "1.3.6.1.4.1.2636.3.15.1.1.12." + vars.if_index + ".5.86.79.73.67.69"
#
#
#    vars.snmp_units = "Bps"
#    vars.snmp_timeout = 10
#    vars.snmp_label = "VoiceDropped-" + interface_name
#
#    check_interval = 5m
#    retry_interval = 30s
#    enable_perfdata = true
#
#    assign    where    host.vars.interface &&   match("*MX*", host.vars.model) 
#}


#apply    Service     "IfCRC-" for  (interface_name    =>    if_index    in    host.vars.interface)    {
#    import    "generic-service"
#    import "SNMP-BASIC-TEMPLATE"
#
#    check_command        =    "snmp"
#    display_name        =     "IfCRC-" + interface_name
#
#    vars                +=    if_index
#    vars.snmp_oid = "1.3.6.1.4.1.2636.3.3.1.1.9." + vars.if_index
#
#
#    vars.snmp_crit = 10
#    vars.snmp_warn = 5
#    vars.snmp_units = "%"
#    vars.snmp_timeout = 10
#    vars.snmp_label = "IfCRC-" + interface_name
#
#
#    
#    check_interval = 30m
#    retry_interval = 30s
#    enable_perfdata = true
#
#    assign    where    host.vars.interface
#}


#apply    Service     "ModuleTemp-" for  (interface_name    =>    if_index    in    host.vars.interface)    {
#    import    "generic-service"
#    import "SNMP-BASIC-TEMPLATE"
#
#    check_command        =    "snmp"
#    display_name        =     "ModuleTemp-" + interface_name
#
#    vars                +=    if_index
#    vars.snmp_oid = "1.3.6.1.4.1.2636.3.60.1.1.1.1.8." + vars.if_index
#
#
#    vars.snmp_crit = 55
#    vars.snmp_warn = 50
#    vars.snmp_units = "*C"
#    vars.snmp_timeout = 10
#    vars.snmp_label = "ModuleTemp-" + interface_name
#
#
#    
#    check_interval = 30m
#    retry_interval = 30s
#    enable_perfdata = false
#
#    assign    where    host.vars.interface &&   match("*MX*", host.vars.model) &&   match("xe*", interface_name)
#}
