apply Notification "Metro_MC_Problem" to Host {
	import "mail-host-notification-customMOBI"
	
	user_groups		= [ "SVTECH",  "MOBIFONE" ]
	types 			= [ Problem ,Recovery]
	interval 		= 1h
	assign where 	host.vars.device_type == "MC"
}


apply Notification "Metro_AGG_Problem" to Host {
	import "mail-host-notification-customMOBI"
	
	user_groups		= [ "SVTECH",  "MOBIFONE" ]
	types 			= [ Problem ,Recovery]
	interval 		= 3h
	assign where 	host.vars.device_type == "AGG"
}


apply Notification "Metro_CSR_Problem" to Host {
	import "mail-host-notification-customMOBI"
	
	user_groups		= [ "SVTECH",  "MOBIFONE" ]
	types 			= [ Problem ,Recovery]
	interval 		= 4h
	assign where 	host.vars.device_type == "CSR"
}



apply Notification "Report_All_Host_Problem" to Host {
	import "report-host-down-notification"
	
	users			= [ "tudoanSVT"]
	states = [Up, Down]
	types = [Problem, Recovery, Custom]
	interval 		= 0
	
	vars.plugin_output_prefix		=	"NodeDOWN"
	vars.plugin_thruk_url			=	"thruk/cgi-bin/status.cgi?hostgroup=all&style=hostdetail&hoststatustypes=12&view_mode=xls&columns=1&columns=2&columns=3&columns=4&columns=5&columns=6&columns=7&columns=8&columns=9&columns=10&columns=11&columns=12"
	
	assign where 	host.vars.device_type == "CSR"
	assign where 	host.vars.device_type == "AGG"
	assign where 	host.vars.device_type == "MC"
}

apply Notification "Report_All_Core_Interface_Problem" to Service {
	import "report-host-down-notification"
	
	users			= [ "tudoanSVT"]
	states = [OK, Warning, Critical, Unknown]
	types = [Problem, Recovery, Custom]
	
	vars.plugin_output_prefix		=	"CoreLinkDOWN"
	vars.plugin_thruk_url			=	"/thruk/cgi-bin/status.cgi?nav=&hidesearch=0&hidetop=&dfl_columns=&dfl_s0_hoststatustypes=15&dfl_s0_servicestatustypes=28&dfl_s0_hostprops=0&dfl_s0_serviceprops=0&style=detail&update.x=14&update.y=11&dfl_s0_type=service&dfl_s0_val_pre=&dfl_s0_op=~&dfl_s0_value=ifCheck&dfl_s0_value_sel=5&dfl_s0_type=service&dfl_s0_val_pre=&dfl_s0_op=~&dfl_s0_value=ae0&dfl_s0_value_sel=5&dfl_s0_type=host&dfl_s0_val_pre=&dfl_s0_op=~&dfl_s0_value=AGG&dfl_s0_value_sel=5&dfl_s1_hoststatustypes=15&dfl_s1_servicestatustypes=28&dfl_s1_hostprops=0&dfl_s1_serviceprops=0&dfl_s1_type=service&dfl_s1_val_pre=&dfl_s1_op=~&dfl_s1_value=ifCheck&dfl_s1_value_sel=5&dfl_s1_type=service&dfl_s1_val_pre=&dfl_s1_op=~&dfl_s1_value=ae1&dfl_s1_value_sel=5&dfl_s1_type=host&dfl_s1_val_pre=&dfl_s1_op=~&dfl_s1_value=agg&dfl_s1_value_sel=5&dfl_s2_hoststatustypes=15&dfl_s2_servicestatustypes=28&dfl_s2_hostprops=0&dfl_s2_serviceprops=0&dfl_s2_type=service&dfl_s2_val_pre=&dfl_s2_op=~&dfl_s2_value=ifCheck&dfl_s2_value_sel=5&dfl_s2_type=service&dfl_s2_val_pre=&dfl_s2_op=~&dfl_s2_value=ge-1%2F1%2F0&dfl_s2_value_sel=5&dfl_s2_type=host&dfl_s2_val_pre=&dfl_s2_op=~&dfl_s2_value=ME-CSR&dfl_s2_value_sel=5&dfl_s3_hoststatustypes=15&dfl_s3_servicestatustypes=28&dfl_s3_hostprops=0&dfl_s3_serviceprops=0&dfl_s3_type=service&dfl_s3_val_pre=&dfl_s3_op=~&dfl_s3_value=ifCheck&dfl_s3_value_sel=5&dfl_s3_type=service&dfl_s3_val_pre=&dfl_s3_op=~&dfl_s3_value=ge-1%2F1%2F1&dfl_s3_value_sel=5&dfl_s3_type=host&dfl_s3_val_pre=&dfl_s3_op=~&dfl_s3_value=ME-CSR&dfl_s3_value_sel=5&dfl_s4_hoststatustypes=15&dfl_s4_servicestatustypes=28&dfl_s4_hostprops=0&dfl_s4_serviceprops=0&dfl_s4_type=service&dfl_s4_val_pre=&dfl_s4_op=~&dfl_s4_value=ifCheck&dfl_s4_value_sel=5&dfl_s4_type=host&dfl_s4_val_pre=&dfl_s4_op=~&dfl_s4_value=MC&dfl_s4_value_sel=5&view_mode=xls&columns=1&columns=2&columns=3&columns=4&columns=5&columns=6&columns=7&columns=8&columns=9&columns=10&columns=11&columns=12&columns=13&columns=14&columns=15&columns=16&columns=17&columns=18&columns=19"
	
	interval 		= 0
	assign where match("*ifCheck*", service.display_name) && match("*MC*",  host.name)
	assign where match("*ifCheck-ae1", service.display_name) && match("*AGG*",  host.name)
	assign where match("*ifCheck-ae2", service.display_name) && match("*AGG*",  host.name)
	assign where match("*ifCheck-ge-1/1/0", service.display_name) && match("*ME-CSR*",  host.name)
	assign where match("*ifCheck-ge-1/1/1", service.display_name) && match("*ME-CSR*",  host.name)
}

#apply Notification "Core_Optic_Problem" to Service {
#	import "mail-service-notification-customMOBI"
#	
#	users			= [ "sonvqSVT","hungnguyenSVT"]
#	user_groups		= [  "MOBIFONE" ]

#	states			= [  Warning, Critical ]
#	types 			= [ Problem ,Recovery]

#	interval 		= 4h
#	
#	assign where service.vars.service_type == "OPTIC" && match("*MC*",  host.name)
#}


apply Notification "Core_Interface_Problem" to Service {
	import "mail-service-notification-customMOBI"
	
	users			= [ "tudoanSVT"]
	user_groups		= [  "MOBIFONE" ]

	states			= [  Warning, Critical ]
	types 			= [ Problem ,Recovery]
	
	interval 		= 4h
	assign where match("*ifCheck*", service.display_name) && match("*MC*",  host.name)
}

#apply Notification "AGG_Optic_Problem" to Service {
#	import "mail-service-notification-customMOBI"

#	users			= [ "sonvqSVT","hungnguyenSVT"]
#	states			= [  Warning, Critical ]
#	types 			= [ Problem ,Recovery]

#	assign where service.vars.service_type == "OPTIC" && match("*AGG*",  host.name)
#}

apply Notification "AGG_Bundle_Interface_Problem" to Service {
	import "mail-service-notification-customMOBI"
	
	users			= [ "dvthn","vthn1-ctv" , "tudoanSVT"]

	states			= [  Warning, Critical ]
	types 			= [ Problem ,Recovery]

	interval 		= 4h

	assign where match("*ifCheck*", service.display_name) && match("*ae*", service.display_name) && match("*AGG*",  host.name)
}

apply Notification "AGG_Child_Interface_Problem" to Service {
	import "mail-service-notification-customMOBI"
	
	users			= [ "dvthn", "vthn1-ctv"]

	states			= [  Warning, Critical ]
	types 			= [ Problem ,Recovery]

	interval 		= 0

	assign where match("*ifCheck*", service.display_name) && match("*ge*", service.display_name) && match("*AGG*",  host.name)
	assign where match("*ifCheck*", service.display_name) && match("*xe*", service.display_name) && match("*AGG*",  host.name)
}

#apply Notification "CSR_Optic_Problem" to Service {
#	import "mail-service-notification-customMOBI"

#	users			= [ "dvthn", "vthn1-ctv"]
#	states			= [  Warning, Critical ]
#	types 			= [ Problem ,Recovery]

#	assign where service.vars.service_type == "OPTIC" && match("*ME-CSR*",  host.name)
#}

apply Notification "CSR_Interface_Problem" to Service {
	import "mail-service-notification-customMOBI"
	
	users			= [ "dvthn", "vthn1-ctv", "tudoanSVT"]

	states			= [  Warning, Critical ]
	types 			= [ Problem ,Recovery]

	interval 		= 0

	assign where match("*ifCheck*", service.display_name) && match("*ME-CSR*",  host.name)
}




apply Notification "Environment_Problem" to Service {
	import 	"mail-service-notification-customMOBI"
	
	users			= [ "dvthn", "vthn1-ctv"]

	states			= [  Warning, Critical ]
	types 			= [ Problem ,Recovery]
	
	interval		= 0
	assign where	service.vars.service_type == "ENVIRONMENT"
}


#apply Notification "CPU_Problem" to Service {
#	import 	"mail-service-notification-customMOBI"
#	
#	users			= [ "dvthn", "vthn1-ctv"]
#
#	states			= [  Warning, Critical ]
#	types 			= [ Problem ,Recovery]
#	
#	interval		= 0
#	assign where	service.vars.service_type == "CPU"
#}


#apply Notification "RAM_Problem" to Service {
#	import 	"mail-service-notification-customMOBI"
#	
#	users			= [ "dvthn", "vthn1-ctv"]
#
#	states			= [  Warning, Critical ]
#	types 			= [ Problem ,Recovery]
#	
#	interval		= 0
#	assign where	service.vars.service_type == "MEMORY"
#}


#apply Notification "Temperature_Problem" to Service {
#	import 	"mail-service-notification-customMOBI"
#	
#	users			= [ "dvthn", "vthn1-ctv"]
#
#	states			= [  Warning, Critical ]
#	types 			= [ Problem ,Recovery]
#	
#	interval		= 0
#	assign where	service.vars.service_type == "TEMPERATURE"
#}











############################RECOVERY MAIL TO DVTHN1##################################################

apply Notification "Metro_MC_Recovery" to Host {
	import "mail-host-notification-customMOBI"
	
	user_groups		= [ "SVTECH",  "MOBIFONE" ]
	types 			= [ Recovery ]
	interval 		= 1h
	assign where 	host.vars.device_type == "MC"
}


apply Notification "Metro_AGG_Recovery" to Host {
	import "mail-host-notification-customMOBI"
	
	users			= [ "dvthn", "vthn1-ctv"]

	types 			= [ Recovery ]
	interval 		= 3h
	assign where 	host.vars.device_type == "AGG"
}


apply Notification "Metro_CSR_Recovery" to Host {
	import "mail-host-notification-customMOBI"
	
	users			= [ "dvthn", "vthn1-ctv" , "tudoanSVT"]

	
	types 			= [ Recovery ]
	interval 		= 4h
	assign where 	host.vars.device_type == "CSR"
}



apply Notification "Core_Interface_Recovery" to Service {
	import "mail-service-notification-customMOBI"
	
	users			= [ "dvthn", "vthn1-ctv" , "tudoanSVT" ]
	types 			= [ Recovery ]
	
	interval 		= 4h
	assign where match("*ifCheck*", service.display_name) && match("*MC*",  host.name)
}


apply Notification "AGG_Bundle_Interface_Recovery" to Service {
	import "mail-service-notification-customMOBI"
	
	users			= [ "dvthn","vthn1-ctv" , "tudoanSVT"]


	types 			= [ Recovery ]

	interval 		= 4h

	assign where match("*ifCheck*", service.display_name) && match("*ae*", service.display_name) && match("*AGG*",  host.name)
}

apply Notification "AGG_Child_Interface_Recovery" to Service {
	import "mail-service-notification-customMOBI"
	
	users			= [ "dvthn", "vthn1-ctv"]

	types 			= [ Recovery ]

	interval 		= 0

	assign where match("*ifCheck*", service.display_name) && match("*ge*", service.display_name) && match("*AGG*",  host.name)
	assign where match("*ifCheck*", service.display_name) && match("*xe*", service.display_name) && match("*AGG*",  host.name)
}


apply Notification "CSR_Interface_Recovery" to Service {
	import "mail-service-notification-customMOBI"
	
	users			= [ "dvthn", "vthn1-ctv"]


	types 			= [ Recovery ]
	interval 		= 0

	assign where match("*ifCheck*", service.display_name) && match("*ME-CSR*",  host.name)
}


apply Notification "Environment_Recovery" to Service {
	import 	"mail-service-notification-customMOBI"
	
	users			= [ "dvthn", "vthn1-ctv"]


	types 			= [ Recovery ]

	interval		= 0
	assign where	service.vars.service_type == "ENVIRONMENT"
}




