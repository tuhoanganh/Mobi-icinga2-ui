apply Notification "Metro_MC_Problem" to Host {
	import "mail-host-notification"
	
	user_groups		= [ "SVTECH",  "MOBIFONE" ]
	types 			= [ Problem ]
	interval 		= 1h
	assign where 	host.vars.device_type == "MC"
}


apply Notification "Metro_AGG_Problem" to Host {
	import "mail-host-notification"
	
	user_groups		= [ "SVTECH",  "MOBIFONE" ]
	types 			= [ Problem ]
	interval 		= 3h
	assign where 	host.vars.device_type == "AGG"
}


apply Notification "Metro_CSR_Problem" to Host {
	import "mail-host-notification"
	
	user_groups		= [ "SVTECH",  "MOBIFONE" ]
	types 			= [ Problem ]
	interval 		= 4h
	assign where 	host.vars.device_type == "CSR"
}


#apply Notification "Core_Optic_Problem" to Service {
#	import "mail-service-notification"
#	
#	users			= [ "sonvqSVT","hungnguyenSVT"]
#	user_groups		= [  "MOBIFONE" ]

#	states			= [  Warning, Critical ]
#	types 			= [ Problem ]

#	interval 		= 4h
#	
#	assign where service.vars.service_type == "OPTIC" && match("*MC*",  host.name)
#}


apply Notification "Core_Interface_Problem" to Service {
	import "mail-service-notification"
	
	users			= [ "tudoanSVT"]
	user_groups		= [  "MOBIFONE" ]

	states			= [  Warning, Critical ]
	types 			= [ Problem ]
	
	interval 		= 4h
	assign where match("*ifCheck*", service.display_name) && match("*MC*",  host.name)
}

#apply Notification "AGG_Optic_Problem" to Service {
#	import "mail-service-notification"

#	users			= [ "sonvqSVT","hungnguyenSVT"]
#	states			= [  Warning, Critical ]
#	types 			= [ Problem ]

#	assign where service.vars.service_type == "OPTIC" && match("*AGG*",  host.name)
#}

apply Notification "AGG_Bundle_Interface_Problem" to Service {
	import "mail-service-notification"
	
	users			= [ "dvthn","vthn1-ctv" , "tudoanSVT"]

	states			= [  Warning, Critical ]
	types 			= [ Problem ]

	interval 		= 4h

	assign where match("*ifCheck*", service.display_name) && match("*ae*", service.display_name) && match("*AGG*",  host.name)
}

apply Notification "AGG_Child_Interface_Problem" to Service {
	import "mail-service-notification"
	
	users			= [ "dvthn", "vthn1-ctv"]

	states			= [  Warning, Critical ]
	types 			= [ Problem ]

	interval 		= 0

	assign where match("*ifCheck*", service.display_name) && match("*ge*", service.display_name) && match("*AGG*",  host.name)
	assign where match("*ifCheck*", service.display_name) && match("*xe*", service.display_name) && match("*AGG*",  host.name)
}

#apply Notification "CSR_Optic_Problem" to Service {
#	import "mail-service-notification"

#	users			= [ "dvthn", "vthn1-ctv"]
#	states			= [  Warning, Critical ]
#	types 			= [ Problem ]

#	assign where service.vars.service_type == "OPTIC" && match("*CSR*",  host.name)
#}

apply Notification "CSR_Interface_Problem" to Service {
	import "mail-service-notification"
	
	users			= [ "dvthn", "vthn1-ctv"]

	states			= [  Warning, Critical ]
	types 			= [ Problem ]

	interval 		= 0

	assign where match("*ifCheck*", service.display_name) && match("*CSR*",  host.name)
}




apply Notification "Environment_Problem" to Service {
	import 	"mail-service-notification"
	
	users			= [ "dvthn", "vthn1-ctv"]

	states			= [  Warning, Critical ]
	types 			= [ Problem ]
	
	interval		= 0
	assign where	service.vars.service_type == "ENVIRONMENT"
}


#apply Notification "CPU_Problem" to Service {
#	import 	"mail-service-notification"
#	
#	users			= [ "dvthn", "vthn1-ctv"]
#
#	states			= [  Warning, Critical ]
#	types 			= [ Problem ]
#	
#	interval		= 0
#	assign where	service.vars.service_type == "CPU"
#}


#apply Notification "RAM_Problem" to Service {
#	import 	"mail-service-notification"
#	
#	users			= [ "dvthn", "vthn1-ctv"]
#
#	states			= [  Warning, Critical ]
#	types 			= [ Problem ]
#	
#	interval		= 0
#	assign where	service.vars.service_type == "MEMORY"
#}


#apply Notification "Temperature_Problem" to Service {
#	import 	"mail-service-notification"
#	
#	users			= [ "dvthn", "vthn1-ctv"]
#
#	states			= [  Warning, Critical ]
#	types 			= [ Problem ]
#	
#	interval		= 0
#	assign where	service.vars.service_type == "TEMPERATURE"
#}











############################RECOVERY MAIL TO DVTHN1##################################################

apply Notification "Metro_MC_Recovery" to Host {
	import "mail-host-notification"
	
	user_groups		= [ "SVTECH",  "MOBIFONE" ]
	types 			= [ Recovery ]
	interval 		= 1h
	assign where 	host.vars.device_type == "MC"
}


apply Notification "Metro_AGG_Recovery" to Host {
	import "mail-host-notification"
	
	users			= [ "dvthn", "vthn1-ctv"]
	types 			= [ Recovery ]
	interval 		= 3h
	assign where 	host.vars.device_type == "AGG"
}


apply Notification "Metro_CSR_Recovery" to Host {
	import "mail-host-notification"
	
	users			= [ "dvthn", "vthn1-ctv"]
	types 			= [ Recovery ]
	interval 		= 4h
	assign where 	host.vars.device_type == "CSR"
}



apply Notification "Core_Interface_Recovery" to Service {
	import "mail-service-notification"
	
	users			= [ "dvthn", "vthn1-ctv" , "tudoanSVT" ]
	types 			= [ Recovery ]
	
	interval 		= 4h
	assign where match("*ifCheck*", service.display_name) && match("*MC*",  host.name)
}


apply Notification "AGG_Bundle_Interface_Recovery" to Service {
	import "mail-service-notification"
	
	users			= [ "dvthn","vthn1-ctv" , "tudoanSVT"]

	states			= [  Critical ]
	types 			= [ Recovery ]

	interval 		= 4h

	assign where match("*ifCheck*", service.display_name) && match("*ae*", service.display_name) && match("*AGG*",  host.name)
}

apply Notification "AGG_Child_Interface_Recovery" to Service {
	import "mail-service-notification"
	
	users			= [ "dvthn", "vthn1-ctv"]


	types 			= [ Recovery ]

	interval 		= 0

	assign where match("*ifCheck*", service.display_name) && match("*ge*", service.display_name) && match("*AGG*",  host.name)
	assign where match("*ifCheck*", service.display_name) && match("*xe*", service.display_name) && match("*AGG*",  host.name)
}


apply Notification "CSR_Interface_Recovery" to Service {
	import "mail-service-notification"
	
	users			= [ "dvthn", "vthn1-ctv"]

	types 			= [ Recovery ]

	interval 		= 0

	assign where match("*ifCheck*", service.display_name) && match("*CSR*",  host.name)
}


apply Notification "Environment_Recovery" to Service {
	import 	"mail-service-notification"
	
	users			= [ "dvthn", "vthn1-ctv"]

	types 			= [ Recovery ]
	
	interval		= 0
	assign where	service.vars.service_type == "ENVIRONMENT"
}




